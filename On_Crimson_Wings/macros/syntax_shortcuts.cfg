## General macros because I'm lazy.  Also includes a few more complex macros not specific to one campaign.

#define SCROLL_AND_PAUSE X Y
    [scroll_to]
        x,y={X},{Y}
    [/scroll_to]
    [delay]
        time=500
    [/delay]
#enddef

#define PAUSE TIME
    [delay]
        time={TIME}
    [/delay]
#enddef

#define SPEAK SPEAKER TEXT
    [message]
        speaker={SPEAKER}
        message={TEXT}
    [/message]
#enddef

#define SPEAK_FILTER FILTER TEXT
    [message]
        {FILTER}
        message={TEXT}
    [/message]
#enddef

#define END_LEVEL RESULT
    [endlevel]
        result={RESULT}
    [/endlevel]
#enddef

#define VAR_EQUALS VAR VALUE
    [variable]
        name={VAR}
        equals={VALUE}
    [/variable]
#enddef

#define VAR_NUM_EQUALS VAR VALUE
    [variable]
        name={VAR}
        numerical_equals={VALUE}
    [/variable]
#enddef

#define VAR_COMPARE VAR COMPARISON VALUE
    [variable]
        name={VAR}
        {COMPARISON}={VALUE}
    [/variable]
#enddef

#define HAVE DESC
    [have_unit]
        description={DESC}
    [/have_unit]
#enddef

#define HAVE_FILTER FILTER
    [have_unit]
        {FILTER}
    [/have_unit]
#enddef

#define GIVE_GOLD SIDE AMOUNT
    [gold]
        side={SIDE}
        amount={AMOUNT}
    [/gold]
#enddef

#define ON_ATTACK DESC
    name=attack
    [filter]
        description={DESC}
    [/filter]
#enddef

#define ON_ATTACK_FILTER FILTER
    name=attack
    [filter]
        {FILTER}
    [/filter]
#enddef

#define ON_ATTACKED DESC
    name=attack
    [filter_second]
        description={DESC}
    [/filter_second]
#enddef

#define ON_ATTACKED_FILTER FILTER
    name=attack
    [filter_second]
        {FILTER}
    [/filter_second]
#enddef

#define ON_LAST_BREATH DESC
    name=last breath
    [filter]
        description={DESC}
    [/filter]
#enddef

#define ON_LAST_BREATH_FILTER FILTER
    name=last breath
    [filter]
        {FILTER}
    [/filter]
#enddef

#define ON_DEATH DESC
    name=die
    [filter]
        description={DESC}
    [/filter]
#enddef

#define ON_DEATH_FILTER FILTER
    name=die
    [filter]
        {FILTER}
    [/filter]
#enddef

#define ON_KILL_BY DESC
    name=die
    [filter_second]
        description={DESC}
    [/filter_second]
#enddef

#define ON_KILL_BY_FILTER FILTER
    name=die
    [filter_second]
        {FILTER}
    [/filter_second]
#enddef

#define ON_CAPTURE X Y FILTER
    name=capture
    [filter]
        x={X}
        y={Y}
        {FILTER}
    [/filter]
#enddef

#define ON_MOVE_TO X Y FILTER
    name=moveto
    [filter]
        x={X}
        y={Y}
        {FILTER}
    [/filter]
#enddef

#define RECALL_UNIT DESC
    [recall]
        description={DESC}
    [/recall]
#enddef

#define KILL_SIDE SIDE
    [kill]
        side={SIDE}
    [/kill]
#enddef

#define DIFFICULTY_VARIABLE VAR E N H
    ## Sets the value of a variable based on difficulty
    [set_variable]
        name={VAR}
#ifdef EASY
        value={E}
#endif
#ifdef NORMAL
        value={N}
#endif
#ifdef HARD
        value={H}
#endif
    [/set_variable]
#enddef

#define NO_GOLD_SIDE
    ## To be used in a [side] tag for sides with no starting gold or income
    gold=0
    income=-2
#enddef

#define GETS_VILLAGE X Y
    ## To be used in a [side] tag
    [village]
        x,y={X},{Y}
    [/village]
#enddef

#define ADD_TO_RECRUIT_LIST UNIT
    [allow_recruit]
        side=1
        type={UNIT}
    [/allow_recruit]
#enddef

#define SCATTER_UNITS NUMBER TYPE PADDING_RADIUS SLF UNIT
    # Scatters the given kind of units randomly on a given area on the map.
    # Borrowed from the development version; can remove when this campaign is migrated to 1.5/1.6

    [store_locations]
        {SLF}

        variable=possible_unit_locations
    [/store_locations]

    {VARIABLE units_to_place {NUMBER}}

    [while]
        [variable]
            name=units_to_place
            greater_than=0
        [/variable]

        [do]
            {RANDOM 1..$possible_unit_locations.length}
            {VARIABLE_OP random add -1}

            [unit]
                type={TYPE}
                x,y=$possible_unit_locations[$random].x,$possible_unit_locations[$random].y
                {UNIT}
            [/unit]

            [store_locations]
                find_in=possible_unit_locations
                [not]
                    x,y=$possible_unit_locations[$random].x,$possible_unit_locations[$random].y
                    radius={PADDING_RADIUS}
                [/not]
                variable=possible_unit_locations
            [/store_locations]

            [if]
                [variable]
                    name=possible_unit_locations.length
                    less_than=1
                [/variable]

                [then]
                    {VARIABLE units_to_place 0}
                [/then]
            [/if]

            {VARIABLE_OP units_to_place add -1}
        [/do]
    [/while]

    {CLEAR_VARIABLE possible_unit_locations}
#enddef

#define RECRUIT_UNIT_VARIATIONS SIDE TYPE VARIATIONS
    # Borrowed from the development version; can remove when moved to 1.5 or 1.6
    [event]
        name=prerecruit
        first_time_only=no

        [filter]
            side={SIDE}
            type={TYPE}
        [/filter]

        {VARIABLE_OP recruited_unit_random_variation rand {VARIATIONS}}

        [if]
            [variable]
                name=recruited_unit_random_variation
                not_equals=none
            [/variable]

            [then]
                [object]
                    duration=forever
                    silent=yes

                    [filter]
                        x,y=$x1,$y1
                    [/filter]

                    [effect]
                        apply_to=variation
                        name=$recruited_unit_random_variation
                    [/effect]
                [/object]
            [/then]
        [/if]
    [/event]
#enddef

#define IS_NEARBY DESC X Y RADIUS
    ## Goes in an [if] statement - checks if the unit with description DESC is within RADIUS hexes of X,Y

    [have_unit]
        description={DESC}
        [and]
            [filter_location]
                x,y={X},{Y}
                radius={RADIUS}
            [/filter_location]
        [/and]
    [/have_unit]
#enddef

#define CHECK_NEARBY DESC1 DESC2 RADIUS
    ## Checks if the units with description DESC1 and DESC2 are within RADIUS hexes of each other
    ## Sets the variable nearby to yes if they are, no if they aren't (or if either doesn't exist)

    [if]
        [have_unit]
            description={DESC1}
        [/have_unit]
        [then]
            [store_unit]
                [filter]
                    description={DESC1}
                [/filter]
                variable=nearby_store
                kill=no
            [/store_unit]

            [if]
                {IS_NEARBY ({DESC2}) $nearby_store.x $nearby.store.y {RADIUS}}
                [then]
                    {VARIABLE nearby yes}
                [/then]
                [else]
                    {VARIABLE nearby no}
                [/else]
            [/if]
            {CLEAR_VARIABLE nearby_store}
        [/then]
        [else]
            {VARIABLE nearby no}
        [/else]
    [/if]
#enddef
